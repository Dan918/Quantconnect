from datetime import timedelta, datetime

class SMAPairsTrading(QCAlgorithm):

    def Initialize(self):
        '''
        starter code securities hardcoded
        '''
        self.SetStartDate(2010, 8, 1)   
        self.SetEndDate(2018, 8, 1)
        self.SetCash(100000)
        
        symbols = [Symbol.Create("bti", SecurityType.Equity, Market.USA), Symbol.Create("pm", SecurityType.Equity, Market.USA)]
        self.UniverseSettings.Resolution = Resolution.Hour
        self.UniverseSettings.DataNormalizationMode = DataNormalizationMode.Raw
        self.AddUniverseSelection(ManualUniverseSelectionModel(symbols))
        self.AddAlpha(PairsTradingAlphaModel())
        self.SetPortfolioConstruction(EqualWeightingPortfolioConstructionModel())
        self.SetExecution(ImmediateExecutionModel())
        
    
    def OnEndOfDay(self, symbol):
        '''
        log for holdings
        takes in symbol
        '''
        self.Log("Taking a position of " + str(self.Portfolio[symbol].Quantity) + " units of symbol " + str(symbol))
    
class PairsTradingAlphaModel(AlphaModel):

    def __init__(self):
        '''
        pulling SMA stdev hourly
        '''
        self.pair = [ ]
        self.spreadMean = SimpleMovingAverage(500)
        self.spreadStd = StandardDeviation(500)
        
        self.period = timedelta(hours=1)
        
    def Update(self, algorithm, data):
        '''
        build spread
        short on down | long on up
        '''

        spread = self.pair[1].Price - self.pair[0].Price
        self.spreadMean.Update(algorithm.Time, spread)
        self.spreadStd.Update(algorithm.Time, spread)
        
        upperthreshold = self.spreadMean.Current.Value + self.spreadStd.Current.Value
        lowerthreshold = self.spreadMean.Current.Value - self.spreadStd.Current.Value
        
        
        if spread > upperthreshold:
            return Insight.Group(
                [
                    Insight.Price(self.pair[0].Symbol, self.period, InsightDirection.Up),
                    Insight.Price(self.pair[1].Symbol, self.period, InsightDirection.Down)
                ])
        
        
        if spread < lowerthreshold:
            return Insight.Group(
                [
                    Insight.Price(self.pair[0].Symbol, self.period, InsightDirection.Down),
                    Insight.Price(self.pair[1].Symbol, self.period, InsightDirection.Up)
                ])
        
        # if spread mid; do nothing
        return []
    
    def OnSecuritiesChanged(self, algorithm, changes):
        '''
        algo to place order
        '''
        self.pair = [x for x in changes.AddedSecurities]
